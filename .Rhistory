# Set up
rm(list=ls())
library(nnet)
library(MASS)
#library(simcf)
library(mlogit)
setwd('J:/Project/phc/nga/choice')
# read in data
data<-read.csv("./data/1f_fully_prepped.csv")
install.packages('mlogit')
setwd('J:/Project/phc/nga/choice')
#library(simcf)
library(mlogit)
head(data)
source('J:/Project/phc/nga/choice/code/3a_model.r', echo=TRUE)
# Set up
rm(list=ls())
library(nnet)
library(MASS)
#library(simcf)
library(mlogit)
setwd('J:/Project/phc/nga/choice')
# read in data
data<-read.csv("./data/1f_fully_prepped.csv")
data$facility<-paste(data$facility,"_",sep="")
int = factor(data$facility)
head(int)
head(data)
head(data$facility)
outcome='facility'
class(data[,outcome])
int = factor(data[,outcome])
class(int)
model.matrix(~int)
head(model.matrix(~int))
intercept=FALSE
if(intercept) print('poo')
?assign
make.dummies <- function(data=data,var,nameto,intercept=FALSE,append=TRUE){
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
# make outcome a factor variable
if(class(data[,outcome])!='factor')
assign(nameto,factor(data[,var]))
if(intercept)
res <- model.marix(~nameto)
else
res <- model.marix(~nameto[,-1])
if(append)
res <- cbind(data,res)
}
max_hh_edu<-as.factor(data$max_hh_edu)
head(model.matrix(~max_hh_edu)[,-1])
head(model.matrix(~max_hh_edu))
data= make.dummies(var='alternatives',nameto='int',intercept=TRUE,append=TRUE)
# make variables dummies where needed
make.dummies <- function(data=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(data[,var]))
if(intercept)
res <- model.marix(~nameto)
else
res <- model.marix(~nameto[,-1])
if(append)
res <- cbind(data,res)
}
data= make.dummies(var='alternatives',nameto='int',intercept=TRUE,append=TRUE)
# make variables dummies where needed
make.dummies <- function(d=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(d[,var]))
if(intercept)
res <- model.marix(~nameto)
else
res <- model.marix(~nameto[,-1])
if(append)
res <- cbind(d,res)
}
data= make.dummies(var='alternatives',nameto='int',intercept=TRUE,append=TRUE)
head(data[,'facility'])
head(data[,facility])
alternatives='facility'
data= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
# make variables dummies where needed
make.dummies <- function(d=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(d[,var]))
if(intercept)
res <- model.matrix(~nameto)
else
res <- model.matrix(~nameto[,-1])
if(append)
res <- cbind(d,res)
}
data= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
alternatives
# make variables dummies where needed
make.dummies <- function(d=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(d[,var]))
if(intercept)
res <- model.matrix(~get(nameto))
else
res <- model.matrix(~nameto[,-1])
if(append)
res <- cbind(d,res)
}
data= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
head(data)
make.dummies <- function(d=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(d[,var]))
if(intercept)
res <- model.matrix(~eval(nameto))
else
res <- model.matrix(~nameto[,-1])
if(append)
res <- cbind(d,res)
}
data= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
nameto='int'
d=data,
d=data
var=alternatives
assign(nameto,factor(d[,var]))
eval(nameto)
eval(pase(text=nameto))
eval(parse(text=nameto))
make.dummies <- function(d=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(d[,var]))
if(intercept)
res <- model.matrix(~eval(parse(text=nameto)))
else
res <- model.matrix(~eval(parse(text=nameto))[,-1])
if(append)
res <- cbind(d,res)
}
data= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
head(data)
head(model.matrix(~int))
?model.matrix
form=as.formula(paste0('~',nameto))
# make variables dummies where needed
make.dummies <- function(d=data,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(d[,var]))
form=as.formula(paste0('~',nameto))
if(intercept)
res <- model.matrix(form)
else
res <- model.matrix(form[,-1])
if(append)
res <- cbind(d,res)
}
data= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
head(data)
# make variables dummies where needed
make.dummies <- function(dat=d,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(dat[,var]))
form=as.formula(paste0('~',nameto))
if(intercept)
res <- model.matrix(form)
else
res <- model.matrix(form[,-1])
if(append)
res <- cbind(dat,res)
}
d=data
d= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
head(d)
data<-read.csv("./data/1f_fully_prepped.csv")
d=data
d= make.dummies(var=alternatives,nameto='int',intercept=TRUE,append=TRUE)
x=c('a','b')
class(x)
x=c('a',1)
x
coeffs<-c()
coeffs
coeffs<-c(coeffs,'t')
coeffs
x<-paste(x,collapse='+')
x
dum="max_hh_edu"
names(make.dummies(var=dum,nameto=dum,intercept=F,append=T))
dum
names(make.dummies(var=dum,nameto=dum,intercept=F,append=F))
# make variables dummies where needed
make.dummies <- function(dat=d,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(dat[,var]))
form=as.formula(paste0('~',nameto))
if(intercept)
res <- model.matrix(form)
else
res <- model.matrix(form)[,-1]
if(append)
res <- cbind(dat,res)
}
names(make.dummies(var=dum,nameto=dum,intercept=F,append=F))
make.dummies(var=dum,nameto=dum,intercept=F,append=F)
make.dummies <- function(dat=d,
var,
nameto,
intercept=FALSE,
append=TRUE) {
if(class(var)!='character')     stop('Var expects character')
if(class(nameto) !='character') stop('nameto expects character')
if(class(data[,outcome])!='factor')
assign(nameto,factor(dat[,var]))
form=as.formula(paste0('~',nameto))
if(intercept)
res <- model.matrix(form)
else
res <- model.matrix(form)[,-1]
if(append)
res <- cbind(dat,res)
return(res)
}
names(make.dummies(var=dum,nameto=dum,intercept=F,append=F))
dum
head(d)
var=dum
nameto=dum
dat=d
assign(nameto,factor(dat[,var]))
form=as.formula(paste0('~',nameto))
form
model.matrix(form)
head(model.matrix(form))
col.names(model.matrix(form))
colnames(model.matrix(form))
colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F))
coeffs = paste(coeffs,
colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+")
coeffs
coeffs = paste(coefficients,collapse='+')
coefficients
coefficients=c('a','b')
coeffs = paste(coefficients,collapse='+')
coeffs = paste(coeffs,
colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+")
coeffs
paste(colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+")
coefficients=c('a','b')
coeffs = paste(coefficients,collapse='+')
coeffs = paste(coeffs,
paste(colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+"),collapse='+')
coeffs
coefficients=c('a','b')
coeffs = paste(coefficients,collapse='+')
coeffs = paste0(coeffs,'+',
paste(colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+"))
coeffs
as.formula(coeffs)
coeffs<-NULL
coeffs =
paste(colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+")
as.formula(coeffs)
d= make.dummies(var=dum,nameto=dum,intercept=F,append=T)
as.formula(coeffs)
?as.formula
environment(as.formula("y ~ x", env = new.env()))environment(as.formula("y ~ x", env = new.env()))
environment(as.formula("y ~ x"))
environment(fo)
environment(as.formula("y ~ x"))
class(fo <- y ~ x1*x2) # "formula"
fo
typeof(fo)  # R internal : "language"
terms(fo)
environment(fo)
environment(as.formula("y ~ x"))
environment(as.formula("y ~ x", env = new.env()))
xnam <- paste0("x", 1:25)
xnam <- paste0("x", 1:25)
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
form = paste(coefficients,collapse='+')
form = paste(coefficients,collapse='+')
form = paste0(form,'+',
paste(colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+"))
form
as.formula(paste0(choiceindicator,'~',form))
choiceindicator=chosen
choiceindicator='chosen'
as.formula(paste0(choiceindicator,'~',form))
form<-mFormula(as.formula(paste0(choiceindicator,'~',form,'-1')))
form
?mlogit
rpl <- function(d=data,
alternatives='facility',
id.variable='pid',
choiceindicator='chosen',
coefficients,
dummycoeffs){
# Throw exceptions
if(class(dummycoeffs)!='character')     stop('dummycoeffs expects character')
if(class(coefficients)!='character')    stop('coefficients expects character')
if(class(choiceindicator)!='character') stop('choiceindicator expects character')
# data must be formatted to one row per alternative/attribute.. throw error if not the case
# format alternatives as intercept
d= make.dummies(var=alternatives,nameto='int',intercept=T,append=T)
# start a list of coefficients
form = paste(coefficients,collapse='+')
# format dummy coeffs and save all possible values in coeff list
for(dums in dummycoeffs){
d= make.dummies(var=dum,nameto=dum,intercept=F,append=T)
form = paste0(form,'+',
paste(colnames(make.dummies(var=dum,nameto=dum,intercept=F,append=F)),
collapse="+"))
}
# get the model formula
form<-mFormula(as.formula(paste0(choiceindicator,'~',form,'-1')))
# format the data to run model using mlogit
md<-mlogit.data(d, choice = choiceindicator,
shape="long", alt.var=alternatives, id.var=id.variable)
# clean data frame
dd<-model.frame(form,data=md)
# first run a straightforward multinomial logit
m <- mlogit(from,dd)
return(m)
}
